#!/usr/bin/env php
<?php
require_once __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console as Console;
use Symfony\Component\Process as Process;
use Symfony\Component\Stopwatch\Stopwatch;

$application = new Console\Application();
$application
    ->register('bench')
    ->setDefinition(array(
        new Console\Input\InputArgument('file', Console\Input\InputArgument::REQUIRED, 'File to bench'),
        new Console\Input\InputOption('iterations', '-i', Console\Input\InputOption::VALUE_OPTIONAL, 'Number of iterations to execute the code from file', 1000),
        new Console\Input\InputOption('php', '-p', Console\Input\InputOption::VALUE_OPTIONAL, 'Give the bin path to php'),
    ))
    ->setDescription('Give a small bench for the file given')
    ->setCode(function (Console\Input\InputInterface $input, Console\Output\OutputInterface $output) {
        $file       = $input->getArgument('file');
        $iterations = $input->getOption('iterations');

        $output->writeln(sprintf('File <info>%s</info>', $file));

        // Check if file exist
        if (false === file_exists($file)) {
            throw new \Exception(sprintf("%s does not exist", $file), 1);
        }

        // Get the content of the php file and make a process
        $script = file_get_contents($file);
        $process = new Process\PhpProcess($script);

        // Check and give the php bin path if necessary
        if (null !== $php = $input->getOption('php')) {
            $process->setPhpBinary($php);
        }

        $stopwatch = new Stopwatch();
        $stopwatch->start('process');
        for ($i=0; $i < $iterations; $i++) {
            // launch new Process
            $process->run();
            if (1 < $iterations) {
                $stopwatch->lap('process');
            }
        }
        $event = $stopwatch->stop('process');

        $memories = 0;
        $times = 0;
        foreach ($event->getPeriods() as $period) {
            $memories += $period->getMemory();
            $times += $period->getDuration();
        }

        $output->writeln(sprintf('Average of memory usage <info>%f MB</info>', $memories/$iterations/1024/1024));
        $output->writeln(sprintf('Average of time <info>%f sec</info>', $times/$iterations));
    })
;
$application->run();
